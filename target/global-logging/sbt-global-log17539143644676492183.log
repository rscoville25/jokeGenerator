[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\buttz\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\buttz\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 21)
[debug]       Load.loadUnit: plugins took 118.1093ms
[debug]       Load.loadUnit: defsScala took 0.4444ms
[debug] [Loading] Scanning directory C:\Users\buttz\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\buttz\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.2009 ms
[debug]           Load.resolveProject(global-plugins) took 67.3775ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\buttz\.sbt\1.0\plugins, plugins: List(<none>))) took 116.8598ms
[debug] [Loading] Done in C:\Users\buttz\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 148.8338ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.136ms
[debug]     Load.loadUnit(file:/C:/Users/buttz/.sbt/1.0/plugins/, ...) took 281.4609ms
[debug]   Load.apply: load took 581.8277ms
[debug]   Load.apply: resolveProjects took 16.1811ms
[debug]   Load.apply: finalTransforms took 86.5936ms
[debug]   Load.apply: config.delegates took 10.9614ms
[debug]   Load.apply: Def.make(settings)... took 537.8971ms
[debug]   Load.apply: structureIndex took 178.0398ms
[debug]   Load.apply: mkStreams took 2.4304ms
[info] loading global plugins from C:\Users\buttz\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8223.4215ms
[debug]           Load.loadUnit: plugins took 29.4953ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\buttz\IdeaProjects\jokeGenerator\project
[debug]             Load.loadUnit: mkEval took 7.0825ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\buttz\IdeaProjects\jokeGenerator\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7572 ms
[info] loading settings for project jokegenerator-build from idea.sbt ...
[debug]               Load.resolveProject(jokegenerator-build) took 3.3582ms
[debug]             Load.loadTransitive: finalizeProject(Project(id jokegenerator-build, base: C:\Users\buttz\IdeaProjects\jokeGenerator\project, plugins: List(<none>))) took 5.6602ms
[debug] [Loading] Done in C:\Users\buttz\IdeaProjects\jokeGenerator\project, returning: (jokegenerator-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3825.2492ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.0183ms
[debug]         Load.loadUnit(file:/C:/Users/buttz/IdeaProjects/jokeGenerator/project/, ...) took 3864.1889ms
[debug]       Load.apply: load took 3867.2226ms
[debug]       Load.apply: resolveProjects took 0.1844ms
[debug]       Load.apply: finalTransforms took 14.8928ms
[debug]       Load.apply: config.delegates took 1.2921ms
[debug]       Load.apply: Def.make(settings)... took 115.8082ms
[debug]       Load.apply: structureIndex took 50.1133ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\Users\buttz\IdeaProjects\jokeGenerator\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6636.7591ms
[debug]     Load.loadUnit: defsScala took 0.0113ms
[debug] [Loading] Scanning directory C:\Users\buttz\IdeaProjects\jokeGenerator
[debug]       Load.loadUnit: mkEval took 0.9115ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.2126 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 50.4507ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\buttz\IdeaProjects\jokeGenerator, plugins: List(<none>))) took 58.389ms
[debug] [Loading] Done in C:\Users\buttz\IdeaProjects\jokeGenerator, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2583.263ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.3828ms
[debug]   Load.loadUnit(file:/C:/Users/buttz/IdeaProjects/jokeGenerator/, ...) took 9243.8769ms
[debug] Load.apply: load took 9247.2666ms
[debug] Load.apply: resolveProjects took 0.4234ms
[debug] Load.apply: finalTransforms took 46.7844ms
[debug] Load.apply: config.delegates took 0.5376ms
[debug] Load.apply: Def.make(settings)... took 96.1483ms
[debug] Load.apply: structureIndex took 42.0797ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to jokeGenerator (in build file:/C:/Users/buttz/IdeaProjects/jokeGenerator/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60653 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60653, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to jokeGenerator (in build file:/C:/Users/buttz/IdeaProjects/jokeGenerator/)
[debug] > Exec(idea-shell, None, None)
